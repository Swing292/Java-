[TOC]

# 概述

Java的集合类主要由**Map接口**和**Collection接口**派生而来的。

![image-20210711214650492](集合.assets/image-20210711214650492.png)



## Collection集合

|               |   有序   | 重复 | 有索引 |
| :-----------: | :------: | :--: | :----: |
|     List      |    √     |  √   |   √    |
|    HashSet    |    ×     |  ×   |   ×    |
|    TreeSet    | 默认升序 |  ×   |   ×    |
| LinkedHashSet |    √     |  ×   |   ×    |

### 遍历方法

1. for循环。 （因为有索引）

2. 迭代器。

   1. Iterator接口表示对集合进行迭代的迭代器，专门实现集合的遍历。

   2. 方法：

      - public Iterator iterator(): 获取集合对应的迭代器，用来遍历集合中的元素的

        ```java
        Iterator<String> it=lists.iterator();
        ```

       - 迭代器.next(): 获取下一个元素值
       - boolean hasNext(): 判断是否有下一个元素

      

3. foreach。

   ```java
   for (String list : lists) {
       System.out.println(list);
   }
   ```

4. JDK 1.8新技术。(Lambda表达式)

   ```java
   lists.forEach(System.out::println);
   ```



### List集合

#### ArrayList集合

1. 有序，可重复，有索引。

2. 底层**基于数组**存储数据的，查询快，增删慢（相对）。

3. 对数组进行了封装，实现了长度可变的数组，即动态地存储数据。

4. 方法：

   ```java
   boolean add(Object o)：在末尾加元素o。
   
   void add(int index, E element)：将元素o添加到指定位置上。
   
   int size()：返回元素个数。
   
   E get(int index)：返回集合中指定位置的元素。
   
   E set(int index, E element):用指定元素替换集合中指定位置的元素,返回更新前的元素值。
   
   boolean contains(Object o)：判断是否存在元素o。
   
   int indexOf(Object obj)：返回元素在集合中出现的索引位置。
   
   E remove(int index): 移除列表中指定位置的元素, 返回的是被移除的元素。
   ```

   

#### LinkedList集合

1. 有序，可重复，有索引。

2. 底层**基于链表**的，增删比较快，查询慢。（支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的）

3. 常用方法：

   ```java
   public void addFirst(E e):将指定元素插入此列表的开头
       
   public void addLast(E e):将指定元素添加到此列表的结尾。
       
   public E getFirst():返回此列表的第一个元素。
       
   public E getLast():返回此列表的最后一个元素。
       
   public E removeFirst():移除并返回此列表的第一个元素。
       
   public E removeLast():移除并返回此列表的最后一个元素。
       
   public E pop():从此列表所表示的堆栈处弹出一个元素。
       
   public void push(E e):将元素推入此列表所表示的堆栈。
   ```

   



### Set集合

1. 去重：

   1. 对于有值特性的，直接判断进行去重。
   2. 对于引用数据类型的类对象：
      1. 让两两对象，先调用自己的hashCode()方法得到彼此的哈希值（所谓的内存地址）
      2. 比较两个对象的哈希值是否相同，不相同则直接认为两个对象不重复。
      3. 如果哈希值相同，会继续让两个对象进行equals比较内容是否相同，相同认为重复，不同则不重复。

2. 无序的原因：

   1. 底层采用了哈希表存储元素

   2. 1.8之前：哈希表 = 数组 + 链表  + （哈希算法）

   3. JDK 1.8之后：哈希表 = 数组 + 链表 + 红黑树  + （哈希算法）。当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。

      

#### HashSet集合

1. 无序，不重复，无索引。



#### TreeSet集合

1. 默认升序，不重复，无索引。

2. 称为排序不重复集合，可以对元素进行默认的升序排序

3. 自排序的方式：

   1. 有值特性的元素：直接升序排序。（浮点型，整型）

   2. 字符串：按首字符的编号排序

   3. 自定义的引用数据类型：**默认无法排序**，执行的时候直接报错（因为不知道排序规则）

      排序规则定义：

      1. 直接为对象的类实现比较器规则接口Comparable，重写比较方法。

      2. 直接为集合设置比较器Comparator对象,重写比较方法。

         ```java
         Set<Employee> employees = new TreeSet<>(new Comparator<Employee>() {
             @Override
             public int compare(Employee o1, Employee o2) {
                 // o1比较者   o2被比较者
                 // 如果程序员认为比较者大于被比较者 返回正数！
                 // 如果程序员认为比较者小于被比较者 返回负数！
                 // 如果程序员认为比较者等于被比较者 返回0！
                 return o1.getAge()-o2.getAge();
             }
         });
         ```

      3. （待修改）定义了比较规则后，可以使用Collections类的sort()方法对元素进行排序。

         ```java
         Collections.sort(list);
         ```

      4. （待修改）使用Collections类的binarySearch()方法对List集合进行查找。

         ```
         int index =Collections.binarySearch(list,student3);
         ```

         

#### LinkedHashSet集合

1. "有序"，不重复，无索引。

2. 底层依然是使用哈希表存储元素的，每个元素都额外带一个链来维护添加顺序。（会多占内存空间）

   

## Map集合

|               |   有序   | 重复 |
| :-----------: | :------: | :--: |
|    HashMap    |    ×     |  ×   |
| LinkedHashMap |    √     |  ×   |
|    TreeMap    | 默认升序 |  ×   |

1. Collection是单值集合体系，Map集合是一种双列集合（每个元素包含两个值）。

2. 每个元素的格式：key=value（键值对元素），也被称为“键值对集合”。**（由键决定特性）**

3. 完整格式：
     {key1=value1 , key2=value2 , key3=value3 , ...}

4. 存储的信息更加的具体丰富。

5. 键不重复，后面重复的键会覆盖前面的整个键值对。（值不做要求）

6. 可为null。

7. **常用API：**

   ```java
   public V put(K key, V value):  把指定的键与指定的值添加到Map集合中。
   
   public V remove(Object key): 把指定的键所对应的键值对元素在Map集合中删除，返回被删除元素的值。
   
   public V get(Object key):根据指定的键，在Map集合中获取对应的值。
   
   public boolean containsKey(Object key):判断集合中是否存在key。
       
   public boolean containsValue(Object):判断集合中是否存在value。
       
   public boolean isEmpty():判断集合中是否存在元素。
       
   public void clear():清除集合中的元素。
       
   public int size():返回集合中元素的数量。
       
   public Set<K> keySet(): 获取Map集合中所有的键，存储到Set集合中。
      
   public Collection<V> values():获取所有value的集合。
   
   public Set<Map.Entry<K,V>> entrySet(): 获取到Map集合中所有的键值对对象的集合(Set集合)。
   ```

8. 遍历方式：

   1. “键找值”：先获取Map集合全部的键，再根据遍历键找值。

      ```java
      Set<String> keys = maps.keySet();
      System.out.println(keys);
      // 输出所有的键
      for (String key : keys) {
          // 通过键取对应的值
          Integer value = maps.get(key);
          System.out.println(key + "=" + value);
      }
      ```

   2. “键值对”：把键值对当成一个整体遍历。`（Map.Entry<String,Integer>实体类型`

      ```java
      Set<Map.Entry<String,Integer>> entries = maps.entrySet();
      for (Map.Entry<String, Integer> entry : entries) {
           String key = entry.getKey();
           Integer value = entry.getValue();
           System.out.println(key + "=>" + value);
      }
      ```

   3. JDK 1.8开始之后的新技术：Lambda表达式。

      ```java
      maps.forEach((k , v) -> {
          System.out.println(k+"==>"+v);
      });
      ```

   4. Map集合可以自定义类型：

      1. 键和值都可以存储自定义类型。

      2. 为自定义类型的键去重，必须重写对象的hashCode()和equals()方法。

         ```java
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (o == null || getClass() != o.getClass()) return false;
             Orange orange = (Orange) o;
             return Double.compare(orange.weight, weight) == 0 &&
                     Objects.equals(name, orange.name) &&
                     Objects.equals(price, orange.price);
         }
         
         @Override
         public int hashCode() {
             return Objects.hash(name, weight, price);
         }
         ```



#### LinkedHashMap集合：

1. 无序，不重复。
2. 底层原理完全一样，都是基于哈希表按照键存储数据。
3. HashMap相当于LinkedHashMap的键都多一个附属值。

